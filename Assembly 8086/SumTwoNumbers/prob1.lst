     1                                  ;
     2                                  ;       Objective: find the sum of two numbers 
     3                                  ;       Input: Requests two  integers  from the user.
     4                                  ;       Output: Outputs the input number.
     5                                  %include "io.mac"
     1                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     2                              <1> extern   proc_GetStr, proc_GetCh
     3                              <1> extern   proc_PutInt, proc_GetInt
     4                              <1> extern   proc_PutLInt, proc_GetLInt
     5                              <1> 
     6                              <1> ;;-------------------------------------------------------------------
     7                              <1> %macro  .STARTUP  0
     8                              <1> ;group dgroup .data .bss
     9                              <1>         global   _start
    10                              <1> _start:
    11                              <1> %endmacro
    12                              <1> ;;-------------------------------------------------------------------
    13                              <1> 
    14                              <1> 
    15                              <1> ;;-------------------------------------------------------------------
    16                              <1> %macro  .EXIT  0
    17                              <1>         mov    EAX,1
    18                              <1>         xor    EBX,EBX
    19                              <1>         int    0x80
    20                              <1> %endmacro
    21                              <1> ;;-------------------------------------------------------------------
    22                              <1> 
    23                              <1> 
    24                              <1> ;;-------------------------------------------------------------------
    25                              <1> %macro  .DATA 0
    26                              <1>         segment .data
    27                              <1> %endmacro
    28                              <1> ;;-------------------------------------------------------------------
    29                              <1> 
    30                              <1> ;;-------------------------------------------------------------------
    31                              <1> %macro  .UDATA 0
    32                              <1>         segment .bss
    33                              <1> %endmacro
    34                              <1> ;;-------------------------------------------------------------------
    35                              <1> 
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> %macro  .CODE 0
    38                              <1>         segment .data
    39                              <1>         segment .bss
    40                              <1>         segment .text
    41                              <1> %endmacro
    42                              <1> ;;-------------------------------------------------------------------
    43                              <1> 
    44                              <1> 
    45                              <1> ;;-------------------------------------------------------------------
    46                              <1> %macro  nwln  0 
    47                              <1>         call    proc_nwln
    48                              <1> %endmacro
    49                              <1> ;;-------------------------------------------------------------------
    50                              <1> 
    51                              <1> 
    52                              <1> ;;-------------------------------------------------------------------
    53                              <1> %macro  PutCh  1 
    54                              <1>         push    AX
    55                              <1>         mov     AL,%1
    56                              <1>         call    proc_PutCh
    57                              <1>         pop     AX
    58                              <1> %endmacro
    59                              <1> ;;-------------------------------------------------------------------
    60                              <1> 
    61                              <1> 
    62                              <1> ;;-------------------------------------------------------------------
    63                              <1> %macro  PutStr  1 
    64                              <1>         push    ECX
    65                              <1>         mov     ECX,%1
    66                              <1>         call    proc_PutStr
    67                              <1>         pop     ECX
    68                              <1> %endmacro
    69                              <1> ;;-------------------------------------------------------------------
    70                              <1> 
    71                              <1> 
    72                              <1> ;;-------------------------------------------------------------------
    73                              <1> %macro  GetStr  1-2 81
    74                              <1>         push    ESI
    75                              <1>         push    EDI
    76                              <1>         mov     EDI,%1
    77                              <1>         mov     ESI,%2
    78                              <1>         call    proc_GetStr
    79                              <1>         pop     EDI
    80                              <1>         pop     ESI
    81                              <1> %endmacro
    82                              <1> ;;-------------------------------------------------------------------
    83                              <1> 
    84                              <1> 
    85                              <1> ;;-------------------------------------------------------------------
    86                              <1> %macro  GetCh   1
    87                              <1>         push    SI
    88                              <1>         xor     SI,SI
    89                              <1> %ifidni %1,AL
    90                              <1>         ;inc     SI
    91                              <1>         call    proc_GetCh
    92                              <1> %elifidni %1,AH
    93                              <1>         mov     SI,1
    94                              <1>         call    proc_GetCh
    95                              <1> %else
    96                              <1>         push    AX
    97                              <1>         call    proc_GetCh
    98                              <1>         mov     %1,AL
    99                              <1>         pop     AX
   100                              <1> %endif
   101                              <1>         pop     SI
   102                              <1> %endmacro
   103                              <1> ;;-------------------------------------------------------------------
   104                              <1> 
   105                              <1> 
   106                              <1> ;;-------------------------------------------------------------------
   107                              <1> %macro  PutInt  1
   108                              <1>         push    AX
   109                              <1>         mov     AX,%1
   110                              <1>         call    proc_PutInt
   111                              <1>         pop     AX
   112                              <1> %endmacro
   113                              <1> ;;-------------------------------------------------------------------
   114                              <1> 
   115                              <1> 
   116                              <1> ;;-------------------------------------------------------------------
   117                              <1> %macro  GetInt  1
   118                              <1> %ifnidni %1,AX
   119                              <1>         push    AX
   120                              <1>         call    proc_GetInt
   121                              <1>         mov     %1,AX
   122                              <1> 	  pop     AX
   123                              <1> %else 
   124                              <1>         call  proc_GetInt
   125                              <1> %endif
   126                              <1> %endmacro
   127                              <1> ;;-------------------------------------------------------------------
   128                              <1> 
   129                              <1> ;;-------------------------------------------------------------------
   130                              <1> %macro  PutLInt  1
   131                              <1>         push    EAX
   132                              <1>         mov     EAX,%1
   133                              <1>         call    proc_PutLInt
   134                              <1>         pop     EAX
   135                              <1> %endmacro
   136                              <1> ;;-------------------------------------------------------------------
   137                              <1> 
   138                              <1> ;;-------------------------------------------------------------------
   139                              <1> %macro  GetLInt  1
   140                              <1> %ifnidni %1,EAX
   141                              <1>         push    EAX
   142                              <1>         call    proc_GetLInt
   143                              <1>         mov     %1,EAX
   144                              <1> 	  pop     EAX
   145                              <1> %else 
   146                              <1>         call  proc_GetLInt
   147                              <1> %endif
   148                              <1> %endmacro
   149                              <1> ;;-------------------------------------------------------------------
   150                              <1> 
     6                                  
     7                                  .DATA
     7                              <1>  segment .data
     8 00000000 506C6561736520696E-     prompt_msg1  db   "Please input first number :  ",0
     8 00000009 707574206669727374-
     8 00000012 206E756D626572203A-
     8 0000001B 202000             
     9 0000001E 506C6561736520696E-     prompt_msg2  db   "Please input the second  number :  ",0
     9 00000027 707574207468652073-
     9 00000030 65636F6E6420206E75-
     9 00000039 6D626572203A202000 
    10 00000042 503A2000                prompt_msg3  db   "P: ",0
    11 00000046 5468652073756D2069-     output_msg  db   "The sum is :",0
    11 0000004F 73203A00           
    12 00000053 4762                    n1          dw   25159
    13 00000055 333E                    n2          dw   15923
    14 00000057 4E                      ch1         db   'N'
    15                                  .UDATA 
    15                              <1>  segment .bss
    16 00000000 <res 00000004>          number1   resd   1 
    17 00000004 <res 00000004>          number2   resd   1
    18                                  
    19                                  .CODE
    19                              <1>  segment .data
    19                              <1>  segment .bss
    19                              <1>  segment .text
    20                                        .STARTUP
    20                              <1> 
    20                              <1>  global _start
    20                              <1> _start:
    21                                        PutStr  prompt_msg1   ; request first number 
    21 00000000 51                  <1>  push ECX
    21 00000001 B9[00000000]        <1>  mov ECX,%1
    21 00000006 E8(00000000)        <1>  call proc_PutStr
    21 0000000B 59                  <1>  pop ECX
    22                                        GetInt CX             ; CX= first number  
    22                              <1> %ifnidni %1,AX
    22 0000000C 6650                <1>  push AX
    22 0000000E E8(00000000)        <1>  call proc_GetInt
    22 00000013 6689C1              <1>  mov %1,AX
    22 00000016 6658                <1>  pop AX
    22                              <1> %else
    22                              <1>  call proc_GetInt
    22                              <1> %endif
    23                                  
    24                                        PutStr  prompt_msg2   ; request second number 
    24 00000018 51                  <1>  push ECX
    24 00000019 B9[1E000000]        <1>  mov ECX,%1
    24 0000001E E8(00000000)        <1>  call proc_PutStr
    24 00000023 59                  <1>  pop ECX
    25                                        GetInt DX             ; DX= second number  
    25                              <1> %ifnidni %1,AX
    25 00000024 6650                <1>  push AX
    25 00000026 E8(00000000)        <1>  call proc_GetInt
    25 0000002B 6689C2              <1>  mov %1,AX
    25 0000002E 6658                <1>  pop AX
    25                              <1> %else
    25                              <1>  call proc_GetInt
    25                              <1> %endif
    26                                   
    27 00000030 6689C8                        mov AX, CX
    28 00000033 6601D0                        add AX, DX      
    29                                        PutStr  output_msg   
    29 00000036 51                  <1>  push ECX
    29 00000037 B9[46000000]        <1>  mov ECX,%1
    29 0000003C E8(00000000)        <1>  call proc_PutStr
    29 00000041 59                  <1>  pop ECX
    30                                        PutInt   AX
    30 00000042 6650                <1>  push AX
    30 00000044 6689C0              <1>  mov AX,%1
    30 00000047 E8(00000000)        <1>  call proc_PutInt
    30 0000004C 6658                <1>  pop AX
    31                                    nwln 
    31 0000004E E8(00000000)        <1>  call proc_nwln
    32                                  done:
    33                                        .EXIT
    33 00000053 B801000000          <1>  mov EAX,1
    33 00000058 31DB                <1>  xor EBX,EBX
    33 0000005A CD80                <1>  int 0x80
    34                                  
    35                                  
    36                                  
    37                                  
    38                                  
    39                                  
    40                                  
